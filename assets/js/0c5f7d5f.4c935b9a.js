"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[9389],{2112:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"ADMIN_Update_Process","title":"\ud83d\udfe1 Admin Update Process (Central Responsibility)","description":"This process applies repo-wide to all sections of the Learning Paths repo:","source":"@site/docs/ADMIN_Update_Process.md","sourceDirName":".","slug":"/ADMIN_Update_Process","permalink":"/Learning-Paths/ADMIN_Update_Process","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ADMIN_Update_Process.md","tags":[],"version":"current","frontMatter":{}}');var i=s(4848),t=s(8453);const l={},o="\ud83d\udfe1 Admin Update Process (Central Responsibility)",d={},a=[{value:"\ud83d\udd04 Frequency",id:"-frequency",level:2},{value:"\ud83d\udd3c Version Control",id:"-version-control",level:2},{value:"\ud83d\udcc2 Workflow",id:"-workflow",level:2},{value:"\ud83d\udc65 Ownership",id:"-ownership",level:2},{value:"\u2705 Output",id:"-output",level:2},{value:"\ud83e\udd16 Reusable Prompt for AI",id:"-reusable-prompt-for-ai",level:2},{value:"\ud83d\udcdd Changelog",id:"-changelog",level:2},{value:"\ud83d\udd17 Next Step",id:"-next-step",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"-admin-update-process-central-responsibility",children:"\ud83d\udfe1 Admin Update Process (Central Responsibility)"})}),"\n",(0,i.jsxs)(n.p,{children:["This process applies ",(0,i.jsx)(n.strong,{children:"repo-wide"})," to all sections of the Learning Paths repo:",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Onboarding, AI, AR, VR, Media, Policies, and any future sections."})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-frequency",children:"\ud83d\udd04 Frequency"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Day 1 of every month at 10:00 AM IST"})," \u2192 Admin must review all ",(0,i.jsx)(n.code,{children:"README.md"})," files (Onboarding, AI, AR, VR, Policies, Media)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Quarterly deep update"})," \u2192 Refresh learning resources (AI/AR/VR)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Yearly HR update"})," \u2192 Refresh policies (leave, holidays, email)."]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"NOTE:"})," Even if no content changes are needed, still bump the version/date once per month."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-version-control",children:"\ud83d\udd3c Version Control"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Every ",(0,i.jsx)(n.code,{children:"README.md"})," starts with a version line, e.g.:"]}),"\n",(0,i.jsx)(n.li,{children:"Always bump version by +0.1 (v1.1 \u2192 v1.2 \u2192 v1.3 \u2026)."}),"\n",(0,i.jsx)(n.li,{children:"Update the month/year to the current one."}),"\n",(0,i.jsx)(n.li,{children:"Do not skip versions. Each PR = one version bump."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-workflow",children:"\ud83d\udcc2 Workflow"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Create a new branch:"}),"\n",(0,i.jsxs)(n.li,{children:["Edit the relevant ",(0,i.jsx)(n.code,{children:"README.md"})," files."]}),"\n",(0,i.jsx)(n.li,{children:"Update the version line at the top."}),"\n",(0,i.jsxs)(n.li,{children:["Commit with a clear message:",(0,i.jsx)(n.br,{}),"\n","Example:"]}),"\n",(0,i.jsx)(n.li,{children:"Push branch \u2192 Open PR \u2192 Request HR/PM review."}),"\n",(0,i.jsxs)(n.li,{children:["Once approved \u2192 Merge to ",(0,i.jsx)(n.code,{children:"main"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-ownership",children:"\ud83d\udc65 Ownership"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Primary:"})," HR / PM"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Secondary:"})," Tech Lead (backup)"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-output",children:"\u2705 Output"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["All ",(0,i.jsx)(n.code,{children:"README.md"})," files show the ",(0,i.jsx)(n.strong,{children:"latest version and date"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Interns/employees always follow the ",(0,i.jsx)(n.strong,{children:"master copy"})," in GitHub Pages."]}),"\n",(0,i.jsxs)(n.li,{children:["Admins must log updates in ",(0,i.jsx)(n.a,{href:"/Learning-Paths/ADMIN_Update_Log",children:(0,i.jsx)(n.code,{children:"ADMIN_Update_Log.md"})}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-reusable-prompt-for-ai",children:"\ud83e\udd16 Reusable Prompt for AI"}),"\n",(0,i.jsx)(n.p,{children:"Copy this prompt into ChatGPT, Cursor, or Copilot when running monthly updates:"}),"\n",(0,i.jsx)(n.p,{children:"You are the Admin Assistant for the Learning Paths repo."}),"\n",(0,i.jsxs)(n.p,{children:["Run this process on ",(0,i.jsx)(n.strong,{children:"Day 1 of every month"}),"."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Open all section READMEs (Onboarding, AI, AR, VR, Policies)."}),"\n",(0,i.jsx)(n.li,{children:'Check the version line at the top (e.g., "Version v1.2 \u2014 Updated September 2025").'}),"\n",(0,i.jsx)(n.li,{children:"If outdated, bump the version by +0.1 and update to the current month/year."}),"\n",(0,i.jsx)(n.li,{children:"Review all links (Company links, tutorials, videos). Suggest updates if broken or outdated."}),"\n",(0,i.jsx)(n.li,{children:'Ensure "Source of Truth" points to central files.'}),"\n",(0,i.jsx)(n.li,{children:"For HR policies: confirm max 12 holidays. Flag if list is missing dates."}),"\n",(0,i.jsx)(n.li,{children:"At the end, output the updated file(s) with new version header(s)."}),"\n",(0,i.jsx)(n.li,{children:"Suggest the proper commit message(s) for each file updated."}),"\n",(0,i.jsxs)(n.li,{children:["Remind the admin to log this update in ",(0,i.jsx)(n.code,{children:"ADMIN_Update_Log.md"})," with PR link, commit hash, and prompt used."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Safety Rule: ",(0,i.jsx)(n.strong,{children:"Do not overwrite old files. Always bump version + log changes in ADMIN_Update_Log.md."})]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"NOTE:"})," This ensures admins never forget version bumps or stale resources."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-changelog",children:"\ud83d\udcdd Changelog"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"v1.1 \u2014 September 2025"})," \u2192 Initial onboarding update (Slack \u2192 Discord, Trello \u2192 Notion, Leave Policy)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"v1.2 \u2014 October 2025"})," \u2192 Central admin process file created and linked from Onboarding README."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-next-step",children:"\ud83d\udd17 Next Step"}),"\n",(0,i.jsxs)(n.p,{children:["After every update, add details (PR link, commit hash, prompt used) in",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.a,{href:"/Learning-Paths/ADMIN_Update_Log",children:(0,i.jsx)(n.code,{children:"ADMIN_Update_Log.md"})}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var r=s(6540);const i={},t=r.createContext(i);function l(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);